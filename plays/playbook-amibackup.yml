---
- hosts: amibackup
  connection: local
  gather_facts: true
  ignore_errors: true
  vars:
     aws_region: ap-southeast-2
  tasks:

     - block:
       - ec2_ami_find:
           aws_access_key: "{{ access_key }}"
           aws_secret_key: "{{ secret_key }}"
           region: "{{ aws_region }}"
           owner: self
           name: "{{ awsname }}-patchbackup*"
           no_result_action: success
           state: available
         register: ami_backup_existing
         delegate_to: localhost

     - block:
       - name: delete existing AMI backup if it exists
         ec2_ami:
           aws_access_key: "{{ access_key }}"
           aws_secret_key: "{{ secret_key }}"
           region: "{{ aws_region }}"
           image_id: "{{ item.ami_id }}"
           delete_snapshot: True
           state: absent
         delegate_to: localhost
         with_items: "{{ ami_backup_existing.results }}"
         ignore_errors: true

       - name: wait for 5 minutes for backup to delete
         command: /bin/sleep 300
         delegate_to: localhost
       when: ami_backup_existing.results[0] is defined

     - block:
       - ec2_remote_facts:
           aws_access_key: "{{ access_key }}"
           aws_secret_key: "{{ secret_key }}"
           region: "{{ aws_region }}"
           filters:
             "tag:Name": "{{ awsname }}"
         register: ec2_facts
         delegate_to: localhost

       - ec2_ami:
           aws_access_key: "{{ access_key }}"
           aws_secret_key: "{{ secret_key }}"
           region: "{{ aws_region }}"
           instance_id: "{{ ec2_facts.instances[0].id }}"
           no_reboot: yes
           wait: yes
           name: "{{ awsname }}-patchbackup-{{ ansible_date_time.date }}"
           tags:
              Name: "{{ awsname }}-patchbackup-{{ ansible_date_time.date }}"
         register: image
         delegate_to: localhost
